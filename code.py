# -*- coding: utf-8 -*-
"""
Created on Fri May 12 14:17:33 2023

@author: LEVIS
"""

import pandas as pd
import numpy as np
import streamlit as st
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from  sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, recall_score, f1_score
from sklearn.model_selection import cross_val_score, KFold
from sklearn.metrics import plot_confusion_matrix
from sklearn.metrics import plot_roc_curve

malware_df = pd.read_csv("D:/data_Manipulation/malwareArtifacts.csv", delimiter=',')

features  = ["AddressOfEntryPoint", "MajorLinkerVersion", "MajorImageVersion", "MajorOperatingSystemVersion",
            "DllCharacteristics", "SizeOfStackReserve", "NumberOfSections", "ResourceSize"]

X = malware_df[features]
y = malware_df["legitimate"]

#separation  des données
X_train, X_test, y_train,  y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Fonction pour la prediction
def predict_malware(model, X_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    fscore = f1_score(y_test, y_pred)
    st.write("Exactitude(Accuracy) :", accuracy)
    st.write("recall(rappel) :", recall)
    st.write("F-Score :", fscore)
    return y_pred

#Interface utilisateur streamlit
st.write("# classification des malwares")

model_choice = st.sidebar.selectbox("choisissez votre model",("KNN","Arbre de decision","Random forest"))
if model_choice == "KNN":
    st.sidebar.write("### parametres de KNN")
    n_neighbors = st.sidebar.slider("Nombre de voisins", 1, 50, 5, 1)
    weights = st.sidebar.selectbox("Poids",("uniform","distance"))
    knn = KNeighborsClassifier(n_neighbors=n_neighbors, weights=weights)
    knn.fit(X_train,y_train)
    st.write("### Résultats de KNN")
    predict_malware(knn, X_test)
    
    #matrice de confusion
    plot_confusion_matrix(knn, X_test,y_test)
    plt.title('matrice de confusion-KNN')
    plt.show()
    st.pyplot()
    
    #courbe ROC pour KNN
    plot_roc_curve(knn, X_test,y_test)
    plt.title('courbe roc-KNN')
    plt.show()
    st.pyplot()
    
elif model_choice == "Arbre de decision":
    st.sidebar.write("### parametre  de l'arbre de decision")
    max_depth = st.sidebar.slider("profondeur maximale",1, 50, 5, 1)
    criterion = st.sidebar.selectbox("critère",("gini","entropy"))
    dtc = DecisionTreeClassifier(max_depth=max_depth, criterion=criterion, random_state=42)
    dtc.fit(X_train,y_train)
    st.write("### Resultats de l'arbre de decision")
    predict_malware(dtc, X_test)
    
    #matrice dde confusion pour l'arbre de decision
    plot_confusion_matrix(dtc, X_test,y_test)
    plt.title('matrice de confusion-arbre de decision')
    plt.show()
    st.pyplot()
    
    #courbe roc arbre de decision
    plot_roc_curve(dtc, X_test,y_test)
    plt.title('courbe arbre de decision')
    plt.show()
    st.pyplot()
    
elif model_choice == "Random forest":
    st.sidebar.write("### parametres du random forest")
    n_estimators = st.sidebar.slider("Nombre d'estimateur",1,100,100,1)
    max_depth= st.sidebar.slider("Profondeur maximale",1,50,5,1)
    rfc = RandomForestClassifier(n_estimators= n_estimators, max_depth=max_depth, random_state=42)
    rfc.fit(X_train,y_train)
    st.write("### Resultats du random Forest")
    predict_malware(rfc, X_test)
    
    #matrice de confusion pour Random Forest
    plot_confusion_matrix(rfc, X_test,y_test)
    plt.title('matrice de confusion-random forest')
    plt.show()
    st.pyplot()
    
    #courbe Roc pour random forest
    plot_roc_curve(rfc, X_test,y_test)
    plt.title('courbe Random Forest')
    plt.show()
    st.pyplot()
